#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT_LAYER   0
#define SECONDARY_LAYER 1
#define TERTIARY_LAYER  2
#define SYSTEM_LAYER    3
#define MOUSE_R_LAYER   4
#define SCROLL_R_LAYER  5
#define MOUSE_L_LAYER   6
#define SCROLL_L_LAYER  7

// Mouse Scroll Value

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

// cirque trackpad input&layer control

&glidepoint_listener_R {
    input-processors =
        <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
        <&zip_xy_scaler 5 2>,
        <&zip_temp_layer MOUSE_R_LAYER 500>;

    lowspeedmode {
        layers = <TERTIARY_LAYER>;
        input-processors =
            <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_xy_scaler 5 5>,
            <&zip_temp_layer MOUSE_R_LAYER 500>;
    };

    scroller {
        layers = <SCROLL_R_LAYER>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            <&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_scroll_scaler 1 8>;
    };
};

&glidepoint_listener_L {
    input-processors =
        <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
        <&zip_xy_scaler 3 2>,
        <&zip_temp_layer MOUSE_L_LAYER 500>;

    lowspeedmode {
        layers = <SECONDARY_LAYER>;
        input-processors =
            <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_xy_scaler 3 4>,
            <&zip_temp_layer MOUSE_L_LAYER 500>;
    };

    scroller {
        layers = <SCROLL_L_LAYER>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            <&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_scroll_scaler 1 6>;
    };
};

/ {
    behaviors {
        // Encoder to Mouse Scroll

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };

        scroll_down_up: behavior_sensor_rotate_mouse_wheel_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        scroll_left_right: behavior_sensor_rotate_mouse_wheel_left_right {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;

            tap-ms = <20>;
        };

        scroll_right_left: behavior_sensor_rotate_mouse_wheel_right_left {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_RIGHT>, <&msc SCRL_LEFT>;

            tap-ms = <20>;
        };

        volume_up_down: behavior_sensor_rotate_volume_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOLUME_UP>, <&kp C_VOLUME_DOWN>;

            tap-ms = <20>;
        };

        dot_comma: dot_comma {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_DOT>, <&kp COMMA>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "DOT_COMMA";
        };

        pls_minus: pls_minus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PLUS>, <&kp MINUS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "PLS_MINUS";
        };

        allow_pageup: allow_pageup {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp UP>, <&kp PAGE_UP>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_PAGEUP";
        };

        allow_pagedown: allow_pagedown {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOWN>, <&kp PAGE_DOWN>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_PAGEDOWN";
        };

        allow_back: allow_back {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp LG(LEFT_BRACKET)>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_BACK";
        };

        allow_front: allow_front {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&kp LG(RIGHT_BRACKET)>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_FRONT";
        };

        mt2: mod_tap2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>;
            bindings = <&kp>, <&kp>;
        };

        scalling_down_up: scalling_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp LG(MINUS)>, <&kp LS(LG(EQUAL))>;

            tap-ms = <10>;
            label = "SCALLING_DOWN_UP";
        };

        bright_down_up: bright_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_BRIGHTNESS_DEC>, <&kp C_BRIGHTNESS_INC>;

            tap-ms = <20>;
            label = "BRIGHT_DOWN_UP";
        };

        new_behavior: new_behavior {
            compatible = "zmk,behavior-tap-dance";
            label = "NEW_BEHAVIOR";
            #binding-cells = <0>;
            bindings = <&kp LA(SPACE)>, <&kp LA(E)>, <&mo 3>;
        };

        window_left_right: window_left_right {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp LC(LEFT_ARROW)>, <&kp LC(RIGHT)>;

            tap-ms = <10>;
            label = "WINDOW_LEFT_RIGHT";
        };

        to_ja: to_ja {
            compatible = "zmk,behavior-tap-dance";
            label = "TO_JA";
            #binding-cells = <0>;
            bindings = <&kp LEFT_COMMAND>, <&kp LANG1>;
        };

        to_en: to_en {
            compatible = "zmk,behavior-tap-dance";
            label = "TO_EN";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp LANG2>;
        };

        lt2: lt2 {
            compatible = "zmk,behavior-hold-tap";
            label = "LT2";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
        };
    };

    macros {
        word: word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1 &kp RS(T) &kp K &kp Y &kp T &kp M &kp N &kp N5 &kp NUMBER_2 &kp NUMBER_4 &kp N8 &kp ENTER>;
            label = "WORD";
        };

        maru_kakko: maru_kakko {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "MARU_KAKKO";
        };

        kaku_kakko: kaku_kakko {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "KAKU_KAKKO";
        };

        bigger_kakko: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp GREATER_THAN &kp LEFT>;
            label = "NEW_MACRO";
        };
    };

    combos {
        compatible = "zmk,combos";

        screenshot {
            bindings = <&kp LG(LS(NUMBER_4))>;
            key-positions = <38 37>;
        };

        screencapture {
            bindings = <&kp LS(LG(N5))>;
            key-positions = <38 36>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <38 1>;
        };

        taskmanager {
            bindings = <&kp LA(LG(ESCAPE))>;
            key-positions = <38 13>;
        };

        sleep {
            bindings = <&kp LC(LG(Q))>;
            key-positions = <26 38>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT_LAYER {
            display-name = "Default";
            sensor-bindings = <&scroll_left_right>, <&scroll_up_down>;

            bindings = <
&lt 2 LC(LEFT)          &mt2 SINGLE_QUOTE Q  &mt2 DOUBLE_QUOTES W  &mt2 GRAVE E            &kp R         &mt2 TILDE T                     &kp Y             &mt2 UNDERSCORE U  &kp I                 &kp O                       &mt2 PERCENT P         &lt 2 LC(RIGHT_ARROW)
&kp TAB                 &mt2 AT A            &mt2 HASH S           &mt2 DOLLAR D           &kp F         &kp G                            &mt2 QUESTION H   &kp J              &kp K                 &kp L                       &kp MINUS              &kp LG(C)
&mt LEFT_SHIFT LS(TAB)  &kp Z                &kp X                 &kp C                   &kp V         &mt2 EXCLAMATION B               &mt2 AMPERSAND N  &kp M              &mt2 SEMICOLON COMMA  &mt2 COLON PERIOD           &mt2 PAGE_UP UP_ARROW  &kp LA(LG(V))
&kp LCTRL               &kp LEFT_ALT         &mt LEFT_SHIFT LANG2  &mt LEFT_COMMAND LANG1  &lt2 4 SPACE  &mt2 LA(LC(LG(L))) LC(UP_ARROW)  &lt 3 LA(SPACE)   &lt2 1 ENTER       &kp BACKSPACE         &mt2 LG(LEFT_BRACKET) LEFT  &mt2 PAGE_DOWN DOWN    &mt2 LG(RIGHT_BRACKET) RIGHT
                                             &kp RIGHT             &kp DOWN_ARROW          &kp LEFT      &kp UP                           &allow_pageup     &allow_back        &allow_pagedown       &allow_front
            >;
        };

        SECONDARY_LAYER {
            display-name = "numpad_layer";
            sensor-bindings = <&scalling_down_up>;
            bindings = <
&none         &kp NUMBER_1      &kp NUMBER_2                &kp NUMBER_3                  &kp NUMBER_4           &kp NUMBER_5       &kp NUMBER_6  &kp N7     &kp N8        &kp N9     &kp N0     &none
&trans        &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS        &none                         &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp PLUS      &kp MINUS  &kp ASTERISK  &kp SLASH  &kp EQUAL  &trans
&trans        &kp LEFT_BRACE    &kp LESS_THAN               &none                         &kp GREATER_THAN       &kp RIGHT_BRACE    &trans        &trans     &trans        &trans     &trans     &trans
&kp LEFT_ALT  &kp LEFT_CONTROL  &mt2 LEFT_SHIFT LANGUAGE_2  &mt2 LEFT_COMMAND LANGUAGE_1  &trans                 &trans             &trans        &trans     &trans        &trans     &trans     &trans
                                &trans                      &trans                        &trans                 &trans             &trans        &trans     &trans        &trans
            >;
        };

        KIGOU_LAYER {
            display-name = "window_layer";
            bindings = <
&none  &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp GRAVE   &none  &kp TILDE        &none             &kp UNDER     &none         &none          &kp PERCENT  &none
&none  &kp AT_SIGN       &kp HASH           &kp DOLLAR  &none  &none            &kp QUESTION      &none         &none         &none          &kp UNDER    &none
&none  &none             &none              &none       &none  &kp EXCLAMATION  &kp AMPERSAND     &none         &none         &none          &kp PAGE_UP  &none
&none  &none             &none              &none       &none  &none            &none             &none         &none         &kp SLASH      &kp PIPE     &kp BACKSLASH
                         &none              &none       &none  &none            &kp LC(UP_ARROW)  &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(RIGHT)
            >;

            sensor-bindings = <&scalling_down_up>;
        };

        SYSTEM_LAYER {
            display-name = "system_layer";
            sensor-bindings = <&bright_down_up>, <&volume_up_down>;

            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none       &none           &none  &none  &none  &none  &none  &none
&none  &none         &none         &none         &bt BT_CLR  &bt BT_CLR_ALL  &none  &none  &none  &none  &none  &none
&none  &none         &none         &none         &none       &none           &none  &none  &none  &none  &none  &none
&none  &none         &none         &none         &none       &word           &none  &none  &none  &none  &none  &none
                     &none         &none         &none       &none           &none  &none  &none  &none
            >;
        };

        MOUSE_R_LAYER {
            display-name = "right_mouse_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                &kp LG(R)  &trans     &kp LG(C)       &kp LG(V)      &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp LG(LEFT_BRACKET)  &mo 5      &mkp LCLK  &mkp RCLK       &kp LG(LA(V))  &mo 4
&trans  &trans  &trans  &trans  &trans  &trans  &trans                &trans     &mkp MCLK  &kp LEFT_SHIFT  &trans         &trans
&trans  &trans  &trans  &trans  &mo 4   &trans  &trans                &trans     &trans     &trans          &trans         &trans
                &trans  &trans  &trans  &trans  &trans                &trans     &trans     &trans
            >;

            sensor-bindings = <&scalling_down_up>, <&scroll_up_down>;
        };

        SCROLL_L_LAYER {
            display-name = "right_mouse_scroll_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        mouse_contrall_layer {
            display-name = "right_mouse_layer";
            bindings = <
&word   &word        &trans  &trans  &trans  &trans            &trans                &kp LG(C)  &kp LG(V)       &kp LG(LA(V))          &trans           &trans
&trans  &kp TAB      &trans  &trans  &trans  &kp LEFT_COMMAND  &kp LG(LEFT_BRACKET)  &mkp LCLK  &mkp RCLK       &kp LG(RIGHT_BRACKET)  &trans           &trans
&trans  &kp LS(TAB)  &trans  &trans  &trans  &kp LEFT_CONTROL  &kp LG(R)             &mkp MB3   &kp LEFT_SHIFT  &trans                 &allow_pageup    &trans
&trans  &trans       &trans  &trans  &trans  &trans            &trans                &trans     &trans          &trans                 &allow_pagedown  &trans
                     &trans  &trans  &trans  &trans            &trans                &trans     &trans          &trans
            >;

            sensor-bindings = <&scroll_left_right>, <&scroll_up_down>;
        };

        layer_9 {
            display-name = "right_mouse_layer";
            bindings = <
&none           &kp LG(V)      &kp LG(C)       &none      &kp LG(R)  &none  &none                 &kp LG(R)  &msc MOVE_Y(20)  &kp LG(C)       &kp LG(V)      &none
&msc MOVE_Y(0)  &kp LG(LA(V))  &mkp RCLK       &mkp LCLK  &none      &none  &kp LG(LEFT_BRACKET)  &none      &mkp LCLK        &mkp RCLK       &kp LG(LA(V))  &mo 4
&none           &none          &kp LEFT_SHIFT  &mkp MCLK  &none      &none  &none                 &none      &mkp MCLK        &kp LEFT_SHIFT  &none          &none
&none           &none          &none           &none      &mo 4      &none  &none                 &mo 4      &kp BACKSPACE    &none           &none          &none
                               &none           &none      &none      &none  &none                 &none      &none            &none
            >;

            sensor-bindings = <&window_left_right>, <&scroll_up_down>;
        };

        left_mouse_layer {
            display-name = "ipad_layer";
            bindings = <
&kp LG(H)           &mt2 SQT Q               &mt2 DOUBLE_QUOTES W        &kp E            &kp R        &mt2 TILDE T        &kp Y             &mt2 UNDERSCORE U  &kp I                 &kp O              &mt2 PERCENT P    &maru_kakko
&kp TAB             &mt2 AT_SIGN A           &mt2 HASH S                 &mt2 DOLLAR D    &kp F        &kp G               &mt2 QUESTION H   &kp J              &kp K                 &kp L              &mt2 EQUAL MINUS  &kaku_kakko
&kp LEFT_SHIFT      &kp Z                    &kp X                       &kp C            &kp V        &mt2 EXCLAMATION B  &mt2 AMPERSAND N  &kp M              &mt2 SEMICOLON COMMA  &mt2 COLON PERIOD  &kp UP_ARROW      &bigger_kakko
&mt2 LEFT_ALT LEFT  &mt2 LEFT_CONTROL RIGHT  &mt2 LEFT_SHIFT LANGUAGE_2  &trans           &trans       &lt 2 LANGUAGE_2    &lt 3 LANGUAGE_1  &lt 2 ENTER        &lt 1 BACKSPACE       &mt2 SLASH LEFT    &mt2 PIPE DOWN    &mt2 BSLH RIGHT
                                             &allow_front                &allow_pagedown  &allow_back  &allow_pageup       &trans            &trans             &trans                &trans
            >;
        };

        MOUSE_L_LAYER {
            display-name = "right_mouse_layer";
            bindings = <
&trans  &trans     &trans     &trans     &trans  &trans  &trans  &trans  &trans     &trans     &trans  &trans
&mo 8   &mkp RCLK  &mkp MCLK  &mkp LCLK  &trans  &trans  &trans  &trans  &mkp LCLK  &mkp RCLK  &trans  &trans
&trans  &trans     &mkp MB5   &mkp MB4   &trans  &trans  &trans  &trans  &trans     &trans     &trans  &trans
&trans  &trans     &trans     &trans     &trans  &trans  &trans  &trans  &trans     &trans     &trans  &trans
                   &trans     &trans     &trans  &trans  &trans  &trans  &trans     &trans
            >;
        };
    };
};
